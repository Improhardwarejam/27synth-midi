#include <MozziGuts.h>
#include <Oscil.h>
#include <ADSR.h>
#include <MIDI.h>
#include <CapacitiveSensor.h>
#include <Echobox.h>
#include <ReverbTank.h>

// Number of touch pads
#define NUM_PADS 23
#define AUDIO_OUT_PIN 28

int touchPins[NUM_PADS] = {3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25};
#define INSTRUMENT_BUTTON 2
#define REVERB_POT A0
#define DELAY_POT A1

// Capacitive Sensors
CapacitiveSensor touchSensors[NUM_PADS];

// MIDI Setup
MIDI_CREATE_DEFAULT_INSTANCE();

// Instrument selection
enum InstrumentType {PIANO, STRINGS, BRASS, GUITAR};
InstrumentType currentInstrument = PIANO;

// Oscillators
Oscil<SIN2048> sineOsc[NUM_PADS];
Oscil<SQUARE2048> squareOsc[NUM_PADS];
Oscil<SAW2048> sawOsc[NUM_PADS];
Oscil<TRIANGLE2048> triangleOsc[NUM_PADS];

// ADSR Envelopes
ADSR<CONTROL_RATE, AUDIO_RATE> envelopes[NUM_PADS];

// Echo & Reverb
Echobox delayEffect;
ReverbTank reverbEffect;

// Note Frequencies
float frequencies[NUM_PADS] = {130.81, 138.59, 146.83, 155.56, 164.81, 174.61, 185.00, 196.00, 207.65, 220.00, 233.08, 246.94,
                               261.63, 277.18, 293.66, 311.13, 329.63, 349.23, 369.99, 392.00, 415.30, 440.00, 466.16};

bool noteActive[NUM_PADS] = {false};

void setup() {
    for (int i = 0; i < NUM_PADS; i++) {
        touchSensors[i] = CapacitiveSensor(touchPins[i], touchPins[i]);
    }

    for (int i = 0; i < NUM_PADS; i++) {
        sineOsc[i].setFreq(frequencies[i]);
        squareOsc[i].setFreq(frequencies[i]);
        sawOsc[i].setFreq(frequencies[i]);
        triangleOsc[i].setFreq(frequencies[i]);
    }

    setInstrumentSettings(PIANO);

    pinMode(INSTRUMENT_BUTTON, INPUT_PULLUP);

    delayEffect.setFeedback(0);
    reverbEffect.setDamping(255); // Max damping for lush sound

    startMozzi();
    MIDI.begin(MIDI_CHANNEL_OMNI);
    Serial.begin(31250);
}

// Change instrument settings
void setInstrumentSettings(InstrumentType instrument) {
    for (int i = 0; i < NUM_PADS; i++) {
        switch (instrument) {
            case PIANO:
                envelopes[i].setADLevels(255, 100);
                envelopes[i].setTimes(5, 50, 0, 300);
                break;
            case STRINGS:
                envelopes[i].setADLevels(255, 200);
                envelopes[i].setTimes(100, 300, 200, 500);
                break;
            case BRASS:
                envelopes[i].setADLevels(255, 180);
                envelopes[i].setTimes(50, 200, 150, 300);
                break;
            case GUITAR:
                envelopes[i].setADLevels(255, 80);
                envelopes[i].setTimes(5, 100, 50, 200);
                break;
        }
    }
}

void loop() {
    audioHook();

    for (int i = 0; i < NUM_PADS; i++) {
        long sensorValue = touchSensors[i].capacitiveSensor(30);

        if (sensorValue > 1000 && !noteActive[i]) {
            noteActive[i] = true;
            envelopes[i].noteOn();
            MIDI.sendNoteOn(i + 48, 127, 1);
        } 
        else if (sensorValue < 1000 && noteActive[i]) {
            noteActive[i] = false;
            envelopes[i].noteOff();
            MIDI.sendNoteOff(i + 48, 0, 1);
        }
    }

    if (digitalRead(INSTRUMENT_BUTTON) == LOW) {
        currentInstrument = static_cast<InstrumentType>((currentInstrument + 1) % 4);
        setInstrumentSettings(currentInstrument);
        delay(300);
    }
}

// Audio Processing
int updateAudio() {
    int output = 0;

    // Read potentiometer values
    int reverbAmount = analogRead(REVERB_POT) / 4; // Convert 0-1023 to 0-255
    int delayTime = analogRead(DELAY_POT) / 4; // Convert 0-1023 to 0-255

    delayEffect.setDelay(delayTime);
    reverbEffect.setRoomSize(reverbAmount);

    for (int i = 0; i < NUM_PADS; i++) {
        if (noteActive[i]) {
            int waveOutput = 0;

            switch (currentInstrument) {
                case PIANO:
                    waveOutput = (triangleOsc[i].next() + sineOsc[i].next()) / 2;
                    break;
                case STRINGS:
                    waveOutput = (sineOsc[i].next() + sawOsc[i].next()) / 2;
                    break;
                case BRASS:
                    waveOutput = (squareOsc[i].next() + sawOsc[i].next()) / 2;
                    break;
                case GUITAR:
                    waveOutput = (triangleOsc[i].next() + squareOsc[i].next()) / 2;
                    break;
            }

            output += envelopes[i].next() * waveOutput / 256;
        }
    }

    // Apply reverb & delay
    output = delayEffect.next(output);
    output = reverbEffect.next(output);

    return output;
}
